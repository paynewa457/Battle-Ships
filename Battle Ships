/**
 * I will be making a text based version of the game battle ships.
 *
 * Walt Payne
 * 14/05/24
 */

import java.util.Scanner;

public class Game {
    /**
     * This method runs the game, it lets yu plae the ships and then 
     * puts the playTurn method intoa while loop until it detects
     * that all the ships are sunk and then the game ends
     */
    public static void main(String[] args) {
        Scanner keyboard = new Scanner(System.in);
        String[][] board1 = new String[10][10];
        String[][] board2 = new String[10][10];
        
        
        System.out.println("To place the ships you need to type the coordinates of one section of your ship,");
        System.out.println("you will then be told how many squares long the ship is and lastly you will say what its orientation is");
        
        board1 = initializeBoard(board1, keyboard, true);
        System.out.print('\u000c');
        board2 = initializeBoard(board2, keyboard, false);
        System.out.print('\u000c');

        int guessX = -1;
        int guessY = -1;
        boolean gameNotWon = true;
        
        while(gameNotWon){
            gameNotWon = playTurn(board2, guessX, guessY, keyboard, true, true);
            if(gameNotWon){
                gameNotWon = playTurn(board1, guessX, guessY, keyboard, true, false);
            }
        }
        System.out.println("Game Over");
    }
    /**
     * This method places the ships on the board it does this by checking
     * if the placement is in bounds through the getValidX/YCoordinate methods
     * if it is it changes the coordinates location from empty to ship
     */
    static String[][] initializeBoard(String[][] board, Scanner keyboard, boolean player1) {
        int numShips = 4;
        boolean okayWithPlacement = false;
        
        if(player1){
            System.out.println("Player1 is placing");
        }else{
            System.out.println("Player2 is placing");
        }
        
        while(!okayWithPlacement){
            for (int x = 0; x < 10; x++) {
                for (int y = 0; y < 10; y++) {
                    board[x][y] = "empty";
                }
            }
            for (int s = 0; s < numShips; s++) {
                System.out.println("Place ship " + (s + 1) + "");
    
                int shipLength;
                if (s == 0) {
                    shipLength = (s + 2);
                } else {
                    shipLength = (s + 1);
                }
                System.out.println("This ship is " + shipLength + " squares long");
    
                String orientation = getValidOrientation(keyboard);
                int shipX;
                int shipY;
    
                // Loop until valid ship placement is found
                while (true) {
                    shipX = getValidXCoordinate(keyboard, "Enter the starting x coordinate of the ship (A-J): ", true, orientation, shipLength);
                    shipY = getValidYCoordinate(keyboard, "Enter the starting y coordinate of the ship (1-10): ", true, orientation, shipLength);
    
                    if (isValidPlacement(shipX, shipY, shipLength, orientation, board)) {
                        placeShip(shipX, shipY, shipLength, orientation, board);
                        break;
                    } else {
                        System.out.println("Invalid placement. The ship overlaps with another ship or is out of bounds. Try again.");
                    }
                }
                System.out.print('\u000c');
                printBoard(board, true);
                }
            boolean validAnswer = false;
                
            System.out.println("Would you like to replace your ships 'yes'or 'no'");
            String yesOrNo = keyboard.nextLine();
            while(!validAnswer){
                if(yesOrNo.toLowerCase().equals("no")){
                    validAnswer = true;
                    okayWithPlacement = true;
                }else if(yesOrNo.toLowerCase().equals("yes")){
                    validAnswer = true;
                }else{
                    System.out.println("That is not a valid answer please enter either 'yes' or 'no'");
                    yesOrNo = keyboard.nextLine();
                }
            }
        }
        return board;
    }
    /**
     * This method plays a turn both player 1's and player 2's turns are done
     * using this method they just use different turns. In the main method 
     * they are in a while loop until it notices all the ships are sunk and 
     * the game ends
     */
    static boolean playTurn(String[][] board, int guessX, int guessY, Scanner keyboard, boolean gameNotWon, boolean player1Guessing) {
        boolean turnOver = false;
        boolean alreadyGuessed;
        
        
        while (!turnOver) {
            System.out.print('\u000c');
            printBoard(board, false);
            alreadyGuessed = true;
            
            if(player1Guessing){
                System.out.println("Player 1 is guessing");
            }else{
                System.out.println("Player 2 is guessing");
            }
            while(alreadyGuessed){
                // Doesn't validate guess until  has checked if the gu 
                guessX = getValidXCoordinate(keyboard, "Enter the x position (A-J): ", false, "N/A", 1);
                guessY = getValidYCoordinate(keyboard, "Enter the y position (1-10): ", false, "N/A", 1);
                
                if (board[guessX - 1][guessY - 1].equals("ship")) {
                    System.out.println("hit");
                    board[guessX - 1][guessY - 1] = "o ";
                    alreadyGuessed = false;
                }else if(board[guessX - 1][guessY - 1].equals("empty")){
                    System.out.println("miss");
                    board[guessX - 1][guessY - 1] = "x ";
                    alreadyGuessed = false;
                    turnOver = true;
                }else{
                    System.out.println("You have already guessed that square please guess another one");
                }
            }
            if (areAllShipsSunk(board)) {
                System.out.println("All ships sunk!");
                turnOver = true;
                gameNotWon = false;
            }
        }
        return gameNotWon;
    }
    /**
     * This method prints the board it makes it so that the spaces with the 
     * values of ship or empty instead pint with a . so you don't know where 
     * the shis are and also so t ooks nicer.
     */
    static void printBoard(String[][] board, boolean placingShip) {
        // Print column labels (A-J)
        System.out.print("  ");
        for (char l = 'A'; l <= 'J'; l++) {
            System.out.print(l + " ");
        }
        System.out.println();

        // Print the board with row labels (1-10)
        for (int y = 0; y < 10; y++) {
            if (y == 9) {
                System.out.print((y + 1)); // Print 10 without an additional space
            } else {
                System.out.print((y + 1) + " "); // Print 1-9 with an additional space
            }
            for (int x = 0; x < 10; x++) {
                if(placingShip){
                    if(board[x][y].equals("empty")){
                        System.out.print(". ");
                    }else if(board[x][y].equals("ship")){
                        System.out.print("o ");
                    }
                }else if (board[x][y].equals("empty") || board[x][y].equals("ship")) {
                    System.out.print(". ");
                }else {
                    System.out.print(board[x][y]);
                }
            }
            System.out.println();
        }
    }
    /**
     * This method checks to see if the X coordinate you entered was valid 
     * it does this by checking to see if you have entered a letter and 
     * if that letter is below J. It also checks if you are placing the 
     * ship and if you are it check the length and orientation of the ship
     * and f it is out of bonds it dosn't let you place the ship there.
     */
    static int getValidXCoordinate(Scanner keyboard, String message, boolean placingShip, String orientation, int shipLength) {
        int coordinate = -1;
        while (true) {
            System.out.println(message);
            String input = keyboard.nextLine().toUpperCase();

            if (placingShip && orientation.equals("h")) {
                if (input.length() == 1 && input.charAt(0) >= 'A' && input.charAt(0) <= 'J' - (shipLength - 1)) {
                    coordinate = input.charAt(0) - 'A' + 1;
                    break;
                } else {
                    System.out.println("Invalid coordinates. Please enter a letter between A and I.");
                }
            } else {
                if (input.length() == 1 && input.charAt(0) >= 'A' && input.charAt(0) <= 'J') {
                    coordinate = input.charAt(0) - 'A' + 1;
                    break;
                } else {
                    System.out.println("Invalid coordinates. Please enter a letter between A and J.");
                }
            }
        }
        return coordinate;
    }
    /**
     * This works the same as the X coordinate but with the Y coordinate 
     * and numbers
     */
    static int getValidYCoordinate(Scanner keyboard, String message, boolean placingShip, String orientation, int shipLength) {
        int coordinate;
        while (true) {
            System.out.println(message);
            if (placingShip && orientation.equals("v")) {
                if (keyboard.hasNextInt()) {
                    coordinate = keyboard.nextInt();
                    keyboard.nextLine(); // Consume the newline character
                    if (coordinate >= 1 && coordinate <= 10 - (shipLength - 1)) {
                        break;
                    }
                } else {
                    keyboard.next(); // Consume the invalid input
                }
                System.out.println("Invalid coordinates. Please enter a number between 1 and 9.");
            } else {
                if (keyboard.hasNextInt()) {
                    coordinate = keyboard.nextInt();
                    keyboard.nextLine(); // Consume the newline character
                    if (coordinate >= 1 && coordinate <= 10) {
                        break;
                    }
                } else {
                    keyboard.next(); // Consume the invalid input
                }
                System.out.println("Invalid coordinates. Please enter a number between 1 and 10.");
            }
        }
        return coordinate;
    }
    /**
     * This method returns an orientaton, there are nly to vald orientations
     * h and v this method only lets you leave when you have enered one of  
     * them it then returns the orientation
     */
    static String getValidOrientation(Scanner keyboard) {
        String orientation;
        while (true) {
            System.out.println("Enter the orientation of the ship (h for horizontal, v for vertical): ");
            orientation = keyboard.nextLine().toLowerCase();
            if (orientation.equals("h") || orientation.equals("v")) {
                break;
            } else {
                System.out.println("Invalid orientation. Please enter 'h' for horizontal or 'v' for vertical.");
            }
        }
        return orientation;
    }
    /**
     * This method checks to see if the conditions of both isWithinBounds 
     * and isOverlapping are met
     */
    static boolean isValidPlacement(int x, int y, int length, String orientation, String[][] board) {
        if (isWithinBounds(x, y, length, orientation)) {
            if (!isOverlapping(x, y, length, orientation, board)) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    /**
     * This method checks the rientation of your ship and then and then 
     * seeing if is out of bounds
     */
    static boolean isWithinBounds(int x, int y, int length, String orientation) {
        if (orientation.equals("h")) {
            return x + length - 1 <= 10;
        } else {
            return y + length - 1 <= 10;
        }
    }
    /**
     * This method checks the orientation and then goes the length of the 
     * ship in that direction to see if it overlaps with another ship
     */
    static boolean isOverlapping(int x, int y, int length, String orientation, String[][] board) {
        for (int i = 0; i < length; i++) {
            int checkX, checkY;
            if (orientation.equals("h")) {
                checkX = x + i;
                checkY = y;
            } else {
                checkX = x;
                checkY = y + i;
            }
            if (board[checkX - 1][checkY - 1].equals("ship")) {
                return true;
            }
        }
        return false;
    }
    /**
     * This method change the value of an empty space to ship
     */
    static void placeShip(int x, int y, int length, String orientation, String[][] board) {
        for (int i = 0; i < length; i++) {
            if (orientation.equals("h")) {
                board[x + i - 1][y - 1] = "ship";
            } else {
                board[x - 1][y + i - 1] = "ship";
            }
        }
    }
    /**
     * This method check to see if all the ships are sunk it does this by 
     * by checking every location on the grid if any hav the value ship 
     * it returns false, otherwise it returns true and the game ends
     */
    static boolean areAllShipsSunk(String[][] board) {
        for (int x = 0; x < 10; x++) {
            for (int y = 0; y < 10; y++) {
                if (board[x][y].equals("ship")) {
                    return false;
                }
            }
        }
        return true;
    }
}
