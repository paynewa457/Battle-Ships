/**
 * I will be making a text based versin of the game battle ships.
 *
 * Walt Payne
 * 14/05/24
 */

import java.util.Scanner;

class ShipSpace {
    int x;
    int y;

    public ShipSpace(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class Game {
    public static void main(String[] args) {
        Scanner keyboard = new Scanner(System.in);
        String[][] board1 = new String[10][10];
        ShipSpace[][] ships;  // Array to hold multiple ships


        int numShips = 2;
        
        ships = new ShipSpace[numShips][];  // Initialize the array to hold the ships

        System.out.println("To place the ships you need to type the coordinates of one section of your ship,");
        System.out.println("you will then be told how many squares long the ship is and lastly you will say what its orientation is");
        for (int s = 0; s < numShips; s++) {
            System.out.println("Place ship" + (s + 1) + "");

            int shipLength;
            if(s == 0){
                shipLength = (s + 2);
            }else{
                shipLength = (s + 1);
            }
            System.out.println("This ship is " + shipLength + " squares long");
            System.out.println("Enter the starting x coordinate of the ship (1-10)");
            int shipX = keyboard.nextInt();
            if (shipX < 1 || shipX > 10 ) {
                System.out.println("Invalid coordinates. Please enter values between 1 and 10.");
                System.out.println("Enter the x position (1-10)");
                shipX = keyboard.nextInt();
            }
            System.out.println("Enter the starting y coordinate of the ship (1-10)");
            int shipY = keyboard.nextInt();
            if (shipY < 1 || shipY > 10 ) {
                System.out.println("Invalid coordinates. Please enter values between 1 and 10.");
                System.out.println("Enter the x position (1-10)");
                shipY = keyboard.nextInt();
            }
            System.out.println("Enter the orientation of the ship (h for horizontal, v for vertical)");
            String orientation = keyboard.nextLine();
            if (orientation.equals("h")|| orientation.equals("v")) {
                System.out.println("Invalid coordinates. Please enter values between 1 and 10.");
                orientation = keyboard.nextLine();
            }

            // Initialize the array to store ship positions
            ships[s] = new ShipSpace[shipLength];

            // Storing ship positions in the ShipSpace array
            for (int i = 0; i < shipLength; i++) {
                if (orientation.equals("h")) {
                    ships[s][i] = new ShipSpace(shipX + i, shipY);
                } else if (orientation.equals("v")) {
                    ships[s][i] = new ShipSpace(shipX, shipY + i);
                }
            }
        }

        int guessX = -1;
        int guessY = -1;
        boolean shipSunk = false;
        player1(board1, ships, guessX, guessY, keyboard);
    }

    static void player1(String[][] board1, ShipSpace[][] ships, int guessX, int guessY, Scanner keyboard) {
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                board1[i][j] = ". ";
            }
        }

        int shipsRemaining = ships.length;

        while (shipsRemaining > 0) {
            // Print column labels (A-J)
            System.out.print("  ");
            for (char l = 'A'; l <= 'J'; l++) {
                System.out.print(l + " ");
            }
            System.out.println();

            // Print the board with row labels (1-10)
            for (int y = 0; y < 10; y++) {
                if (y == 9) {
                    System.out.print((y + 1)); // Print 10 without an additional space
                } else {
                    System.out.print((y + 1) + " "); // Print 1-9 with an additional space
                }
                for (int x = 0; x < 10; x++) {
                    System.out.print(board1[x][y]);
                }
                System.out.println();
            }

            System.out.println("Enter the x position (1-10)");
            guessX = keyboard.nextInt();
            if (guessX < 1 || guessX > 10 ) {
                System.out.println("Invalid coordinates. Please enter values between 1 and 10.");
                System.out.println("Enter the x position (1-10)");
                guessX = keyboard.nextInt();
            }
            System.out.println("Enter the y position (1-10)");
            guessY = keyboard.nextInt();
             if (guessY < 1 || guessY > 10 ) {
                System.out.println("Invalid coordinates. Please enter values between 1 and 10.");
                System.out.println("Enter the y position (1-10)");
                guessY = keyboard.nextInt();
            }


            boolean hit = false;

            // Check if the guessed position matches any ship position
            for (ShipSpace[] ship : ships) {
                for (ShipSpace shipSpace : ship) {
                    if (guessX == shipSpace.x && guessY == shipSpace.y) {
                        System.out.println("hit");
                        board1[guessX - 1][guessY - 1] = "o ";
                        hit = true;
                        break;
                    }
                }
                if (hit) break;
            }

            if (hit) {
                boolean allSunk = true;

                // Check if all ships are sunk
                for (ShipSpace[] ship : ships) {
                    for (ShipSpace shipSpace : ship) {
                        if (board1[shipSpace.x - 1][shipSpace.y - 1].equals(". ")) {
                            allSunk = false;
                            break;
                        }
                    }
                }

                if (allSunk) {
                    System.out.println("All ships sunk!");
                    shipsRemaining = 0;
                } else {
                    // Check if the current ship is sunk
                    boolean currentShipSunk = true;
                    for (ShipSpace shipSpace : ships[shipsRemaining - 1]) {
                        if (board1[shipSpace.x - 1][shipSpace.y - 1].equals(". ")) {
                            currentShipSunk = false;
                            break;
                        }
                    }
                    if (currentShipSunk) {
                        System.out.println("Ship sunk!");
                        shipsRemaining--;
                    }
                }
            } else {
                System.out.println("miss");
                board1[guessX - 1][guessY - 1] = "x ";
            }
        }
    }
}
